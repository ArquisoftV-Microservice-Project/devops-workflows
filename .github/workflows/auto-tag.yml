name: Auto Tag on Commit

on:
  workflow_call:
    inputs:
      prefix:
        description: 'Prefijo para el tag (ejemplo: "v")'
        required: false
        type: string
        default: "v"
      bump_pattern:
        description: "PatrÃ³n regex para detectar bump en el mensaje de commit"
        required: false
        type: string
        default: "release:[ ]*(major|minor|patch)"
      default_bump:
        description: "Tipo de bump por defecto si no se especifica"
        required: false
        type: string
        default: "patch"
    secrets:
      token:
        description: "Token para crear el tag (normalmente GITHUB_TOKEN)"
        required: false

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.token || github.token }}

      - name: Get last commit message
        id: get-commit-message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: determine-bump
        run: |
          COMMIT_MSG=${{ steps.get-commit-message.outputs.message }}
          BUMP_PATTERN='${{ inputs.bump_pattern }}'
          DEFAULT_BUMP='${{ inputs.default_bump }}'

          echo "Checking commit message: $COMMIT_MSG"
          echo "Using pattern: $BUMP_PATTERN"

          if [[ $COMMIT_MSG =~ $BUMP_PATTERN ]]; then
            if [[ $COMMIT_MSG =~ release:[ ]*major ]]; then
              echo "bump=major" >> $GITHUB_OUTPUT
              echo "Detected major version bump"
            elif [[ $COMMIT_MSG =~ release:[ ]*minor ]]; then
              echo "bump=minor" >> $GITHUB_OUTPUT
              echo "Detected minor version bump"
            elif [[ $COMMIT_MSG =~ release:[ ]*patch ]]; then
              echo "bump=patch" >> $GITHUB_OUTPUT
              echo "Detected patch version bump"
            else
              echo "bump=$DEFAULT_BUMP" >> $GITHUB_OUTPUT
              echo "Using default bump: $DEFAULT_BUMP"
            fi
          else
            echo "No release pattern found in commit message. Skipping tagging."
            exit 0
          fi

      - name: Get latest tag
        id: get-latest-tag
        run: |
          PREFIX='${{ inputs.prefix }}'
          LATEST_TAG=$(git tag -l "${PREFIX}*" --sort=-v:refname | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            echo "latest_tag=${PREFIX}0.0.0" >> $GITHUB_OUTPUT
            echo "major=0" >> $GITHUB_OUTPUT
            echo "minor=0" >> $GITHUB_OUTPUT
            echo "patch=0" >> $GITHUB_OUTPUT
          else
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            # Remove prefix
            VERSION=${LATEST_TAG#$PREFIX}
            # Split version into parts
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            echo "major=$MAJOR" >> $GITHUB_OUTPUT
            echo "minor=$MINOR" >> $GITHUB_OUTPUT
            echo "patch=$PATCH" >> $GITHUB_OUTPUT
          fi

      - name: Create new tag
        id: create-tag
        run: |
          PREFIX='${{ inputs.prefix }}'
          BUMP_TYPE=${{ steps.determine-bump.outputs.bump }}
          MAJOR=${{ steps.get-latest-tag.outputs.major }}
          MINOR=${{ steps.get-latest-tag.outputs.minor }}
          PATCH=${{ steps.get-latest-tag.outputs.patch }}

          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$BUMP_TYPE" == "patch" ]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $NEW_TAG -m "Release $NEW_TAG created from commit: (${{ steps.get-commit-message.outputs.message }})"
          git push origin $NEW_TAG
          echo "Successfully created and pushed tag $NEW_TAG"
