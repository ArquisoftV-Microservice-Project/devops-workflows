name: Image Build and Push

on:
    workflow_call:
      inputs:
        namespace:
            required: true
            type: string
      secrets:
        GCP_SA_CREDENTIALS:
          required: true
        GCP_PROJECT:
          required: true
        GKE_CLUSTER:
          required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          project_id: "${{ secrets.GCP_PROJECT }}"

      - name: "Use gcloud CLI"
        run: |
          gcloud auth configure-docker ${{ vars.GCP_ZONE }}-docker.pkg.dev

      - id: "get-credentials"
        uses: "google-github-actions/get-gke-credentials@v2"
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ vars.GCP_ZONE }}

      - name: Set image tags
        run: |
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          # Reemplaza '/' por '-' en el nombre de la rama para evitar errores en el tag
          BRANCH_NAME=$(echo "${GITHUB_REF##*/}" | tr '/' '-')
          echo "IMAGE_TAG=${BRANCH_NAME}-${TIMESTAMP}" >> $GITHUB_ENV

      - name: Build Docker images
        run: |
          IMAGE_PATH=${{ vars.GCP_ZONE }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
          docker build -t $IMAGE_PATH:latest -t $IMAGE_PATH:$IMAGE_TAG .

      - name: Push Docker images
        run: |
          IMAGE_PATH=${{ vars.GCP_ZONE }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
          docker push $IMAGE_PATH:latest
          docker push $IMAGE_PATH:$IMAGE_TAG

      - name: Check if deployment exists and update if it does
        run: |
          if kubectl get deployment ${{ vars.IMAGE_NAME }} -n ${{ inputs.namespace }} &>/dev/null; then
            kubectl set image deployment/${{ vars.IMAGE_NAME }} \
              ${{ vars.IMAGE_NAME }}-container=${{ vars.GCP_ZONE }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}:$IMAGE_TAG \
              -n ${{ inputs.namespace }}
            echo "Deployment updated successfully"
          else
            echo "Deployment ${{ vars.IMAGE_NAME }} does not exist in namespace ${{ inputs.namespace }}. Skipping update."
          fi
